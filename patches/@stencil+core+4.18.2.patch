diff --git a/node_modules/@stencil/core/internal/app-data/package.json b/node_modules/@stencil/core/internal/app-data/package.json
index 9c13c4c..9aaaabd 100644
--- a/node_modules/@stencil/core/internal/app-data/package.json
+++ b/node_modules/@stencil/core/internal/app-data/package.json
@@ -1,9 +1,9 @@
 {
-  "name": "@stencil/core/internal/app-data",
+  "name": "@stencil/core/internal/app-data/index.js",
   "version": "4.18.2",
   "description": "Used for default app data and build conditionals within builds.",
-  "main": "./index.cjs",
-  "module": "./index.js",
+  "type": "module",
+  "main": "./index.js",
   "types": "./index.d.ts",
   "exports": {
     "import": "./index.js",
diff --git a/node_modules/@stencil/core/internal/client/index.js b/node_modules/@stencil/core/internal/client/index.js
index fcd5e26..ce1b0e9 100644
--- a/node_modules/@stencil/core/internal/client/index.js
+++ b/node_modules/@stencil/core/internal/client/index.js
@@ -8,7 +8,7 @@ var __export = (target, all) => {
 };
 
 // src/client/client-build.ts
-import { BUILD } from "@stencil/core/internal/app-data";
+import { BUILD } from "@stencil/core/internal/app-data/index.js";
 var Build = {
   isDev: BUILD.isDev ? true : false,
   isBrowser: true,
@@ -17,7 +17,7 @@ var Build = {
 };
 
 // src/client/client-host-ref.ts
-import { BUILD as BUILD22 } from "@stencil/core/internal/app-data";
+import { BUILD as BUILD22 } from "@stencil/core/internal/app-data/index.js";
 
 // src/runtime/asset-path.ts
 var getAssetPath = (path) => {
@@ -27,7 +27,7 @@ var getAssetPath = (path) => {
 var setAssetPath = (path) => plt.$resourcesUrl$ = path;
 
 // src/runtime/bootstrap-custom-element.ts
-import { BUILD as BUILD19 } from "@stencil/core/internal/app-data";
+import { BUILD as BUILD19 } from "@stencil/core/internal/app-data/index.js";
 
 // src/utils/constants.ts
 var EMPTY_OBJ = {};
@@ -97,13 +97,13 @@ var unwrapErr = (result) => {
 };
 
 // src/runtime/connected-callback.ts
-import { BUILD as BUILD16 } from "@stencil/core/internal/app-data";
+import { BUILD as BUILD16 } from "@stencil/core/internal/app-data/index.js";
 
 // src/runtime/client-hydrate.ts
-import { BUILD as BUILD4 } from "@stencil/core/internal/app-data";
+import { BUILD as BUILD4 } from "@stencil/core/internal/app-data/index.js";
 
 // src/runtime/profile.ts
-import { BUILD as BUILD2 } from "@stencil/core/internal/app-data";
+import { BUILD as BUILD2 } from "@stencil/core/internal/app-data/index.js";
 var i = 0;
 var createTime = (fnName, tagName = "") => {
   if (BUILD2.profile && performance.mark) {
@@ -207,7 +207,7 @@ var FORM_ASSOCIATED_CUSTOM_ELEMENT_CALLBACKS = [
 ];
 
 // src/runtime/vdom/h.ts
-import { BUILD as BUILD3 } from "@stencil/core/internal/app-data";
+import { BUILD as BUILD3 } from "@stencil/core/internal/app-data/index.js";
 var h = (nodeName, vnodeData, ...children) => {
   let child = null;
   let key = null;
@@ -541,7 +541,7 @@ var initializeDocumentHydrate = (node, orgLocNodes) => {
 };
 
 // src/runtime/initialize-component.ts
-import { BUILD as BUILD15 } from "@stencil/core/internal/app-data";
+import { BUILD as BUILD15 } from "@stencil/core/internal/app-data/index.js";
 
 // src/runtime/mode.ts
 var computeMode = (elm) => modeResolutionChain.map((h2) => h2(elm)).find((m) => !!m);
@@ -549,13 +549,13 @@ var setMode = (handler) => modeResolutionChain.push(handler);
 var getMode = (ref) => getHostRef(ref).$modeName$;
 
 // src/runtime/proxy-component.ts
-import { BUILD as BUILD14 } from "@stencil/core/internal/app-data";
+import { BUILD as BUILD14 } from "@stencil/core/internal/app-data/index.js";
 
 // src/runtime/set-value.ts
-import { BUILD as BUILD13 } from "@stencil/core/internal/app-data";
+import { BUILD as BUILD13 } from "@stencil/core/internal/app-data/index.js";
 
 // src/runtime/parse-property-value.ts
-import { BUILD as BUILD5 } from "@stencil/core/internal/app-data";
+import { BUILD as BUILD5 } from "@stencil/core/internal/app-data/index.js";
 var parsePropertyValue = (propValue, propType) => {
   if (propValue != null && !isComplexType(propValue)) {
     if (BUILD5.propBoolean && propType & 4 /* Boolean */) {
@@ -573,13 +573,13 @@ var parsePropertyValue = (propValue, propType) => {
 };
 
 // src/runtime/update-component.ts
-import { BUILD as BUILD12, NAMESPACE } from "@stencil/core/internal/app-data";
+import { BUILD as BUILD12, NAMESPACE } from "@stencil/core/internal/app-data/index.js";
 
 // src/runtime/event-emitter.ts
-import { BUILD as BUILD7 } from "@stencil/core/internal/app-data";
+import { BUILD as BUILD7 } from "@stencil/core/internal/app-data/index.js";
 
 // src/runtime/element.ts
-import { BUILD as BUILD6 } from "@stencil/core/internal/app-data";
+import { BUILD as BUILD6 } from "@stencil/core/internal/app-data/index.js";
 var getElement = (ref) => BUILD6.lazyLoad ? getHostRef(ref).$hostElement$ : ref;
 
 // src/runtime/event-emitter.ts
@@ -606,7 +606,7 @@ var emitEvent = (elm, name, opts) => {
 };
 
 // src/runtime/styles.ts
-import { BUILD as BUILD8 } from "@stencil/core/internal/app-data";
+import { BUILD as BUILD8 } from "@stencil/core/internal/app-data/index.js";
 var rootAppliedStyles = /* @__PURE__ */ new WeakMap();
 var registerStyle = (scopeId2, cssText, allowCS) => {
   let style = styles.get(scopeId2);
@@ -689,13 +689,13 @@ var getScopeId = (cmp, mode) => "sc-" + (BUILD8.mode && mode && cmp.$flags$ & 32
 var convertScopedToShadow = (css) => css.replace(/\/\*!@([^\/]+)\*\/[^\{]+\{/g, "$1{");
 
 // src/runtime/vdom/vdom-render.ts
-import { BUILD as BUILD11 } from "@stencil/core/internal/app-data";
+import { BUILD as BUILD11 } from "@stencil/core/internal/app-data/index.js";
 
 // src/runtime/vdom/update-element.ts
-import { BUILD as BUILD10 } from "@stencil/core/internal/app-data";
+import { BUILD as BUILD10 } from "@stencil/core/internal/app-data/index.js";
 
 // src/runtime/vdom/set-accessor.ts
-import { BUILD as BUILD9 } from "@stencil/core/internal/app-data";
+import { BUILD as BUILD9 } from "@stencil/core/internal/app-data/index.js";
 var setAccessor = (elm, memberName, oldValue, newValue, isSvg, flags) => {
   if (oldValue !== newValue) {
     let isProp = isMemberInElement(elm, memberName);
@@ -2009,7 +2009,7 @@ var setContentReference = (elm) => {
 };
 
 // src/runtime/disconnected-callback.ts
-import { BUILD as BUILD17 } from "@stencil/core/internal/app-data";
+import { BUILD as BUILD17 } from "@stencil/core/internal/app-data/index.js";
 var disconnectInstance = (instance) => {
   if (BUILD17.lazyLoad && BUILD17.disconnectedCallback) {
     safeCall(instance, "disconnectedCallback");
@@ -2038,7 +2038,7 @@ var disconnectedCallback = async (elm) => {
 };
 
 // src/runtime/dom-extras.ts
-import { BUILD as BUILD18 } from "@stencil/core/internal/app-data";
+import { BUILD as BUILD18 } from "@stencil/core/internal/app-data/index.js";
 var patchPseudoShadowDom = (hostElementPrototype, descriptorPrototype) => {
   patchCloneNode(hostElementPrototype);
   patchSlotAppendChild(hostElementPrototype);
@@ -2452,7 +2452,7 @@ var forceModeUpdate = (elm) => {
 };
 
 // src/runtime/bootstrap-lazy.ts
-import { BUILD as BUILD20 } from "@stencil/core/internal/app-data";
+import { BUILD as BUILD20 } from "@stencil/core/internal/app-data/index.js";
 
 // src/runtime/hmr-component.ts
 var hmrStart = (hostElement, cmpMeta, hmrVersionId) => {
@@ -2632,7 +2632,7 @@ var bootstrapLazy = (lazyBundles, options = {}) => {
 var Fragment = (_, children) => children;
 
 // src/runtime/host-listener.ts
-import { BUILD as BUILD21 } from "@stencil/core/internal/app-data";
+import { BUILD as BUILD21 } from "@stencil/core/internal/app-data/index.js";
 var addHostEventListeners = (elm, hostRef, listeners, attachParentListeners) => {
   if (BUILD21.hostListener && listeners) {
     if (BUILD21.hostListenerTargetParent) {
@@ -2848,10 +2848,10 @@ var registerHost = (hostElement, cmpMeta) => {
 var isMemberInElement = (elm, memberName) => memberName in elm;
 
 // src/client/client-load-module.ts
-import { BUILD as BUILD24 } from "@stencil/core/internal/app-data";
+import { BUILD as BUILD24 } from "@stencil/core/internal/app-data/index.js";
 
 // src/client/client-log.ts
-import { BUILD as BUILD23 } from "@stencil/core/internal/app-data";
+import { BUILD as BUILD23 } from "@stencil/core/internal/app-data/index.js";
 var customError;
 var consoleError = (e, el) => (customError || console.error)(e, el);
 var STENCIL_DEV_MODE = BUILD23.isTesting ? ["STENCIL:"] : [
@@ -2899,10 +2899,10 @@ var styles = /* @__PURE__ */ new Map();
 var modeResolutionChain = [];
 
 // src/client/client-task-queue.ts
-import { BUILD as BUILD26 } from "@stencil/core/internal/app-data";
+import { BUILD as BUILD26 } from "@stencil/core/internal/app-data/index.js";
 
 // src/client/client-window.ts
-import { BUILD as BUILD25 } from "@stencil/core/internal/app-data";
+import { BUILD as BUILD25 } from "@stencil/core/internal/app-data/index.js";
 var win = typeof window !== "undefined" ? window : {};
 var doc = win.document || { head: {} };
 var H = win.HTMLElement || class {
@@ -3022,7 +3022,7 @@ var readTask = /* @__PURE__ */ queueTask(queueDomReads, false);
 var writeTask = /* @__PURE__ */ queueTask(queueDomWrites, true);
 
 // src/client/index.ts
-import { BUILD as BUILD27, Env, NAMESPACE as NAMESPACE2 } from "@stencil/core/internal/app-data";
+import { BUILD as BUILD27, Env, NAMESPACE as NAMESPACE2 } from "@stencil/core/internal/app-data/index.js";
 export {
   BUILD27 as BUILD,
   Build,
diff --git a/node_modules/@stencil/core/internal/client/package.json b/node_modules/@stencil/core/internal/client/package.json
index f57602f..aa1b169 100644
--- a/node_modules/@stencil/core/internal/client/package.json
+++ b/node_modules/@stencil/core/internal/client/package.json
@@ -2,6 +2,7 @@
   "name": "@stencil/core/internal/client",
   "version": "4.18.2",
   "description": "Stencil internal client platform to be imported by the Stencil Compiler and internal runtime. Breaking changes can and will happen at any time.",
+  "type": "module",
   "main": "./index.js",
   "private": true,
   "sideEffects": false
